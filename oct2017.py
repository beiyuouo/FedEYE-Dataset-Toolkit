import os
import pandas as pd
import yaml
import numpy as np
import shutil


dataset_root = "G:\dataset\OCT2017"
image_root = os.path.join(dataset_root, "train")
export_root = os.path.join(dataset_root, "export")
num_clients = 4
iid = True
alpha = 0.3
seed = 0
n_classes = 4


def set_seed(seed):
    np.random.seed(seed)


def partation_data(data, num_clients, iid, alpha):
    num_samples = len(data)

    if iid:
        num_samples_per_client = int(num_samples / num_clients)
        indices = np.arange(num_samples)
        np.random.shuffle(indices)
        client_data = {
            i: data.iloc[
                indices[i * num_samples_per_client : (i + 1) * num_samples_per_client]
            ]
            for i in range(num_clients)
        }

    else:

        label_distribution = np.random.dirichlet([alpha] * num_clients, n_classes)

        class_idcs = [
            np.argwhere(np.array(data.category) == i).flatten()
            for i in range(n_classes)
        ]

        client_idcs = [[] for _ in range(num_clients)]

        for c, fracs in zip(class_idcs, label_distribution):
            for i, idcs in enumerate(
                np.split(c, (np.cumsum(fracs)[:-1] * len(c)).astype(int))
            ):
                client_idcs[i] += [idcs]

        client_idcs = [np.concatenate(idcs) for idcs in client_idcs]

        client_data = {i: data.iloc[client_idcs[i]] for i in range(num_clients)}

    return client_data


def main():
    set_seed(seed)
    data = pd.DataFrame(
        [
            (os.path.join(image_root, "CNV", f), "CNV")
            for f in os.listdir(os.path.join(image_root, "CNV"))
        ]
        + [
            (os.path.join(image_root, "DME", f), "DME")
            for f in os.listdir(os.path.join(image_root, "DME"))
        ]
        + [
            (os.path.join(image_root, "DRUSEN", f), "DRUSEN")
            for f in os.listdir(os.path.join(image_root, "DRUSEN"))
        ]
        + [
            (os.path.join(image_root, "NORMAL", f), "NORMAL")
            for f in os.listdir(os.path.join(image_root, "NORMAL"))
        ],
        columns=["name", "category"],
    )

    client_data = partation_data(data, num_clients, iid, alpha)

    export_root = os.path.join(
        dataset_root, "export", "iid" if iid else f"non-iid_{alpha}"
    )
    os.makedirs(export_root, exist_ok=True)

    for i in range(num_clients):
        client_export_root = os.path.join(export_root, f"client_{i}")
        os.makedirs(client_export_root, exist_ok=True)
        os.makedirs(os.path.join(client_export_root, "images"), exist_ok=True)

        # images, meta.yaml, train.csv

        client_data[i].rename(columns={"category": "label"}, inplace=True)
        client_data[i].label = client_data[i].label.map(
            {"CNV": 0, "DME": 1, "DRUSEN": 2, "NORMAL": 3}
        )

        client_data[i].label = client_data[i].label.astype(int)
        # only list the file name
        client_data[i].name = (
            client_data[i]
            .name.astype(str)
            .str.split("\\")
            .str[-1]
            .str.split(".")
            .str[0]
        )

        client_data[i].to_csv(
            os.path.join(client_export_root, "train.csv"), index=False
        )

        with open(os.path.join(client_export_root, "meta.yaml"), "w") as f:
            yaml.dump(
                {
                    "attributes": {
                        "evalType": "multi",
                        "name": f"Retinal OCT Images Dataset {i} of {num_clients}",
                        "note": f"This dataset is generated by OCT2017 dataset with {iid if iid else f'non-iid alpha={alpha}'} partitioning.",
                    },
                    "inputs": {
                        "ext": "jpg",
                        "pilMode": "RGB",
                        "type": "image",
                    },
                    "labelMappping": [
                        {"label": "0", "mapped": "CNV"},
                        {"label": "1", "mapped": "DME"},
                        {"label": "2", "mapped": "DRUSEN"},
                        {"label": "3", "mapped": "NORMAL"},
                    ],
                    "targets": [
                        {"name": "label", "type": "integer"},
                    ],
                    "type": "vision",
                },
                f,
            )

        for image_nm, image_cat in zip(client_data[i].name, client_data[i].label):
            image_nm = image_nm + ".jpg"
            image_cat = ["CNV", "DME", "DRUSEN", "NORMAL"][image_cat]
            shutil.copy(
                os.path.join(image_root, image_cat, image_nm),
                os.path.join(client_export_root, "images", image_nm),
            )

        print(f"Client {i} has {len(client_data[i])} samples exported.")


def preprocess():
    # preprocess: change the image extension to jpg
    for category in ["CNV", "DME", "DRUSEN", "NORMAL"]:
        for f in os.listdir(os.path.join(image_root, category)):
            os.rename(
                os.path.join(image_root, category, f),
                os.path.join(image_root, category, f.split(".")[0] + ".jpg"),
            )


if __name__ == "__main__":
    # preprocess()
    main()
